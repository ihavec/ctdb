#!/bin/bash

# The ability of ctdb_test_env to take tests on the command-line is
# nice, but here we need to hack around it with that colon to reset
# the arguments that it sees.
. $(dirname $0)/ctdb_test_env :

. ctdb_test_functions.bash

usage() {
    cat <<EOF
Usage: run_tests [OPTIONS] [TESTS]

EOF
    exit 1
}

######################################################################

with_summary=false
with_desc=false

temp=$(getopt -n "$prog" -o "xdhs" -l help -- "$@")

[ $? != 0 ] && usage

eval set -- "$temp"

while true ; do
    case "$1" in
	-x) set -x; shift ;;
	-d) with_desc=true ; shift ;;  # 4th line of output is description
	-s) with_summary=true ; shift ;;
	--) shift ; break ;;
	*) usage ;;
    esac
done

######################################################################

tests_total=0
tests_passed=0
summary=""

rows=$(if tty -s ; then stty size ; else echo x 80 ; fi | sed -e 's@.* @@' -e 's@^0$@80@')
ww=$((rows - 7))

tf=$(mktemp)

set -o pipefail

for f; do
    [ -x $f ] || fail "test \"$f\" is not executable"
    tests_total=$(($tests_total + 1))
    ctdb_test_run "$f" | tee "$tf"
    status=$?
    if [ $status -eq 0 ] ; then
	tests_passed=$(($tests_passed + 1))
	t="PASSED"
    else
	t="FAILED"
    fi
    if $with_desc ; then
	f="${f#./}" ; f="${f%%[./]*}"
	desc=$(tail -n +4 $tf | head -n 1)
	f="${f} ${desc}"
    fi
    summary=$(printf "%s\n%-${ww}s%s" "$summary" "$f" "$t")
done

rm -f "$tf"

if $with_summary ; then
    echo "$summary"
    echo
    echo "${tests_passed}/${tests_total} tests passed"
fi

test_exit
