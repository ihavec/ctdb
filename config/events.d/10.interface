#!/bin/sh

#################################
# interface event script for ctdb
# this adds/removes IPs from your 
# public interface

. /etc/ctdb/functions
loadconfig ctdb

cmd="$1"
shift

[ -z "$CTDB_PUBLIC_ADDRESSES" ] && {
	CTDB_PUBLIC_ADDRESSES=/etc/ctdb/public_addresses
}

[ ! -f "$CTDB_PUBLIC_ADDRESSES" ] && {
	echo "No public addresses file found. Nothing to do for 10.interfaces"
	exit 0
}

case $cmd in 
     #############################
     # called when ctdbd starts up
     startup)
	# make sure that we only respond to ARP messages from the NIC where
	# a particular ip address is associated.
	echo 1 > /proc/sys/ipv4/conf/all/arp_filter
	;;


     ################################################
     # called when ctdbd wants to claim an IP address
     takeip)
	if [ $# != 3 ]; then
	   echo "must supply interface, IP and maskbits"
	   exit 1
	fi
	iface=$1
	ip=$2
	maskbits=$3

	# we make sure the interface is up first
	/sbin/ip link set $iface up || {
		 echo "`/bin/date` Failed to bringup interface $iface"
		 exit 1
	}
	/sbin/ip addr add $ip/$maskbits dev $iface || {
		 echo "`/bin/date` Failed to add $ip/$maskbits on dev $iface"
		 exit 1
	}

	# flush our route cache
	echo 1 > /proc/sys/net/ipv4/route/flush
	;;


     ##################################################
     # called when ctdbd wants to release an IP address
     releaseip)
	if [ $# != 3 ]; then
	   echo "`/bin/date` must supply interface, IP and maskbits"
	   exit 1
	fi
	iface=$1
	ip=$2
	maskbits=$3
	/sbin/ip addr del $ip/$maskbits dev $iface || {
		 echo "`/bin/date` Failed to del $ip on dev $iface"
		 exit 1
	}

	# flush our route cache
	echo 1 > /proc/sys/net/ipv4/route/flush
	;;


     ###########################################
     # called when ctdbd has finished a recovery
     recovered)
	;;

     ####################################
     # called when ctdbd is shutting down
     shutdown)
	;;

     monitor)
	[ -x /usr/sbin/ethtool ] && {
		cat $CTDB_PUBLIC_ADDRESSES | sed -e "s/^[^\t ]*[\t ]*//" -e "s/[\t ]*$//" | sort | uniq | while read IFACE; do
	    		/usr/sbin/ethtool $IFACE | grep 'Link detected: yes' > /dev/null || {
				echo "`date` ERROR: No link on the public network interface $IFACE"
				exit 1
	    		}
		done
	}
	;;

esac

exit 0



