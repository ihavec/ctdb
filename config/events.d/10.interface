#!/bin/sh

#################################
# interface event script for ctdb
# this adds/removes IPs from your 
# public interface

. $CTDB_BASE/functions
loadconfig

[ -z "$CTDB_PUBLIC_ADDRESSES" ] && {
	CTDB_PUBLIC_ADDRESSES=$CTDB_BASE/public_addresses
}

[ ! -f "$CTDB_PUBLIC_ADDRESSES" ] && {
	echo "No public addresses file found. Nothing to do for 10.interfaces"
	exit 0
}

add_ip_to_iface()
{
	local _iface=$1
	local _ip=$2
	local _maskbits=$3

	# we make sure the interface is up first
	/sbin/ip link set $_iface up || {
		echo "Failed to bringup interface $_iface"
		return 1;
	}
	/sbin/ip addr add $_ip/$_maskbits brd + dev $_iface || {
		echo "Failed to add $_ip/$_maskbits on dev $_iface"
		return 1;
	}

	return 0;
}

delete_ip_from_iface()
{
	local _iface=$1
	local _ip=$2
	local _maskbits=$3

	# the ip tool will delete all secondary IPs if this is the primary. To work around
	# this _very_ annoying behaviour we have to keep a record of the secondaries and re-add
	# them afterwards. yuck
	local _secondaries=""
	if /sbin/ip addr list dev $_iface primary | grep -q "inet $_ip/$_maskbits " ; then
	    _secondaries=`/sbin/ip addr list dev $_iface secondary | grep " inet " | awk '{print $2}'`
	fi
	local _failed=0
	/sbin/ip addr del $_ip/$_maskbits dev $_iface || _failed=1
	[ -z "$_secondaries" ] || {
	    local _i=""
	    for _i in $_secondaries; do
		if /sbin/ip addr list dev $_iface | grep -q "inet $_i" ; then
		    echo "kept secondary $_i on dev $_iface"
		else
		    echo "re-adding secondary address $_i to dev $_iface"
		    /sbin/ip addr add $_i dev $_iface || _failed=1
		fi
	    done
	}
	[ $_failed = 0 ] || {
		echo "Failed to del $_ip on dev $_iface"
		return 1;
	}
	return 0;
}

case "$1" in 
     #############################
     # called when ctdbd starts up
     init)
	# make sure that we only respond to ARP messages from the NIC where
	# a particular ip address is associated.
	[ -f /proc/sys/net/ipv4/conf/all/arp_filter ] && {
	    echo 1 > /proc/sys/net/ipv4/conf/all/arp_filter
	}
	cat "$CTDB_PUBLIC_ADDRESSES" | cut -d/ -f1 | while read _IP; do
		_IP_HELD=`/sbin/ip addr show | grep "inet $_IP/"`
		[ -z "$_IP_HELD" ] || {
			_IFACE=`echo $_IP_HELD | sed -e "s/.*\s//"`
			_NM=`echo $_IP_HELD | sed -e "s/.*$_IP\///" -e "s/\s.*//"`
			echo "Removing public address $_IP/$_NM from device $_IFACE"
			/sbin/ip addr del $_IP/$_NM dev $_IFACE
		}
	done
	;;


     ################################################
     # called when ctdbd wants to claim an IP address
     takeip)
	if [ $# != 4 ]; then
	   echo "must supply interface, IP and maskbits"
	   exit 1
	fi
	iface=$2
	ip=$3
	maskbits=$4

	add_ip_to_iface $iface $ip $maskbits || {
		exit 1;
	}

	# cope with the script being killed while we have the interface blocked
	iptables -D INPUT -i $iface -d $ip -j DROP 2> /dev/null

	# flush our route cache
	echo 1 > /proc/sys/net/ipv4/route/flush
	;;


     ##################################################
     # called when ctdbd wants to release an IP address
     releaseip)
	if [ $# != 4 ]; then
	   echo "must supply interface, IP and maskbits"
	   exit 1
	fi

	# releasing an IP is a bit more complex than it seems. Once the IP
	# is released, any open tcp connections to that IP on this host will end
	# up being stuck. Some of them (such as NFS connections) will be unkillable
	# so we need to use the killtcp ctdb function to kill them off. We also
	# need to make sure that no new connections get established while we are 
	# doing this! So what we do is this:
	# 1) firewall this IP, so no new external packets arrive for it
	# 2) use netstat -tn to find existing connections, and kill them 
	# 3) remove the IP from the interface
	# 4) remove the firewall rule
	iface=$2
	ip=$3
	maskbits=$4

	failed=0
	# we do an extra delete to cope with the script being killed
	iptables -D INPUT -i $iface -d $ip -j DROP 2> /dev/null
	iptables -I INPUT -i $iface -d $ip -j DROP
	kill_tcp_connections $ip

	delete_ip_from_iface $iface $ip $maskbits || {
		iptables -D INPUT -i $iface -d $ip -j DROP 2> /dev/null
		exit 1;
	}

	iptables -D INPUT -i $iface -d $ip -j DROP 2> /dev/null

	# flush our route cache
	echo 1 > /proc/sys/net/ipv4/route/flush
	;;


     ###########################################
     # called when ctdbd has finished a recovery
     recovered)
	;;

     ####################################
     # called when ctdbd is shutting down
     shutdown)
	;;

     monitor)
	INTERFACES=`cat $CTDB_PUBLIC_ADDRESSES | 
		sed -e "s/^[^\t ]*[\t ]*//" -e "s/[\t ]*$//"`

	[ "$CTDB_PUBLIC_INTERFACE" ] && INTERFACES="$CTDB_PUBLIC_INTERFACE $INTERFACES"
	[ "$CTDB_NATGW_PUBLIC_IFACE" ] && INTERFACES="$CTDB_NATGW_PUBLIC_IFACE $INTERFACES"

	INTERFACES=`for IFACE in $INTERFACES ; do echo $IFACE ; done | sort | uniq`

	for IFACE in $INTERFACES ; do
	    # These interfaces are sometimes bond devices
	    # When we use VLANs for bond interfaces, there will only
	    # be an entry in /proc for the underlying real interface
	    REALIFACE=`echo $IFACE |sed -e 's/\..*$//'`
	    [ -f /proc/net/bonding/$REALIFACE ] && {
		grep -q 'Currently Active Slave: None' /proc/net/bonding/$REALIFACE && {
			echo "ERROR: No active slaves for bond device $REALIFACE"
			exit 1
		}
		grep -q '^MII Status: up' /proc/net/bonding/$REALIFACE || {
			echo "ERROR: public network interface $REALIFACE is down"
			exit 1
		}
		exit 0;
	    }

	    case $IFACE in 
	    ib*)
		# we dont know how to test ib links
		;;
	    *)
		[ -z "$IFACE" ] || {
		    /usr/sbin/ethtool $IFACE | grep -q 'Link detected: yes' || {
			# On some systems, this is not successful when a
			# cable is plugged but the interface has not been
			# brought up previously. Bring the interface up and
			# try again...
			/sbin/ip link set $IFACE up
			/usr/sbin/ethtool $IFACE | grep -q 'Link detected: yes' || {
			    echo "ERROR: No link on the public network interface $IFACE"
			    exit 1
			}
	    	    }
		}
		;;
	    esac
	done
	;;
    *)
	ctdb_standard_event_handler "$@"
	;;
esac

exit 0

