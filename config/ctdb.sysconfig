# Options to ctdbd. This is read by /etc/init.d/ctdb

# you must specify the location of a shared lock file across all the
# nodes. This must be on shared storage
# there is no default
# CTDB_RECOVERY_LOCK="/some/place/on/shared/storage"

# when doing IP takeover you also may specify what network interface
# to use by default for the public addresses. Otherwise you must
# specify an interface on each line of the public addresses file
# there is no default
# CTDB_PUBLIC_INTERFACE=eth0

# Should ctdb do IP takeover? If it should, then specify a file
# containing the list of public IP addresses that ctdb will manage
# Note that these IPs must be different from those in $NODES above
# there is no default.
# The syntax is one line per public address of the form :
#   <ipaddress>/<netmask> <interface>
# Example: 10.1.1.1/24 eth0
#
# CTDB_PUBLIC_ADDRESSES=/etc/ctdb/public_addresses

# Should CTDB present the cluster using a single public ip address to clients
# and multiplex clients across all CONNECTED nodes ?
# This is based on LVS 
# When this is enabled, the entire cluster will present one single ip address
# which clients will connect to.
# CTDB_LVS_PUBLIC_IP=10.1.1.1


# IPMUX : OBSOLETE use LVS instead
# Should ctdb implement a single public ip address across the entire cluster
# and multiplex incoming connections across the connected nodes
# When using a single public ip you must also specify the public interface!
# This makes all incoming traffic go through a single ctdb node which
# will then forward the packets out acros the other nodes. This will 
# impact performance.
# CTDB_SINGLE_PUBLIC_IP=10.1.1.1

# should ctdb manage starting/stopping the Samba service for you?
# default is to not manage Samba
# CTDB_MANAGES_SAMBA=yes

# should ctdb manage starting/stopping the http service for you?
# default is to not manage http 
# CTDB_MANAGES_HTTPD=yes

# should ctdb manage starting/stopping Winbind service?
# if left comented out then it will be autodetected based on smb.conf
# CTDB_MANAGES_WINBIND=yes

# you may wish to raise the file descriptor limit for ctdb
# use a ulimit command here. ctdb needs one file descriptor per
# connected client (ie. one per connected client in Samba)
#  ulimit -n 10000

# the NODES file must be specified or ctdb won't start
# it should contain a list of IPs that ctdb will use
# it must be exactly the same on all cluster nodes
# defaults to /etc/ctdb/nodes
# CTDB_NODES=/etc/ctdb/nodes

# the directory to put the local ctdb database files in
# defaults to /var/ctdb
# CTDB_DBDIR=/var/ctdb

# the directory to put the local persistent ctdb database files in
# defaults to /var/ctdb/persistent
# CTDB_DBDIR_PERSISTENT=/var/ctdb/persistent

# the directory where service specific event scripts are stored
# defaults to /etc/ctdb/events.d
# CTDB_EVENT_SCRIPT_DIR=/etc/ctdb/events.d

# the location of the local ctdb socket
# defaults to /tmp/ctdb.socket
# CTDB_SOCKET=/tmp/ctdb.socket

# what transport to use. Only tcp is currently supported
# defaults to tcp
# CTDB_TRANSPORT="tcp"

# where to log messages
# the default is /var/log/log.ctdb
# CTDB_LOGFILE=/var/log/log.ctdb

# what debug level to run at. Higher means more verbose
# the default is 0
# CTDB_DEBUGLEVEL=0

# set any default tuning options for ctdb
# use CTDB_SET_XXXX=value where XXXX is the name of the tuning
# variable
# for example
#    CTDB_SET_TRAVERSETIMEOUT=60
# you can get a list of variables using "ctdb listvars"


# any other options you might want. Run ctdbd --help for a list
# CTDB_OPTIONS=

