#!/bin/sh
# sample event script for ctdb

. /etc/sysconfig/ctdb

cmd="$1"
shift

case $cmd in 
     startup)
	# wait for local services to come up
	[ -z "$CTDB_WAIT_TCP_PORTS" ] || {
	  all_ok=0
	  echo "Waiting for tcp services on $CTDB_WAIT_TCP_PORTS to come up"
	  while [ $all_ok -eq 0 ]; do
	  	  all_ok=1
	  	  for p in $CTDB_WAIT_TCP_PORTS; do
	  	      /usr/bin/nc -z 127.0.0.1 $p || all_ok=0
		  done
		  [ $all_ok -eq 1 ] || sleep 1
		  /usr/bin/ctdb status > /dev/null 2>&1 || {
	  		echo "ctdb daemon has died. Exiting event startup"
			exit 1
		  }
          done
	  echo "Local tcp services on $CTDB_WAIT_TCP_PORTS are up"
	}
	exit 0;	
	;;
	
     takeip)
	if [ $# != 3 ]; then
	   echo "must supply interface, IP and maskbits"
	   exit 1
	fi
	iface=$1
	ip=$2
	maskbits=$3

	/sbin/ip addr add $ip/$maskbits dev $iface || {
		 echo "Failed to add $ip/$maskbits on dev $iface"
		 exit 1
	}
	# if we have a local arp entry for this IP then remove it
	/sbin/arp -d $ip 2> /dev/null

	# having a list of what IPs we have allows statd to do the right 
	# thing via /etc/ctdb/statd-callout
	/bin/touch /etc/ctdb/ip.$ip
	exit 0
	;;

     releaseip)
	if [ $# != 3 ]; then
	   echo "must supply interface, IP and maskbits"
	   exit 1
	fi
	iface=$1
	ip=$2
	maskbits=$3
	/sbin/ip addr del $ip dev $iface || {
		 echo "Failed to del $ip on dev $iface"
		 exit 1
	}
	# if we have a local arp entry for this IP then remove it
	/sbin/arp -d $ip 2> /dev/null
	echo $ip >> /etc/ctdb/released_ips
	/bin/rm -f /etc/ctdb/ip.$ip
	exit 0
	;;

     recovered)
        # restart any services as necessary, like NFS
	# 
	[ -x /etc/ctdb/statd-callout ] && /etc/ctdb/statd-callout copy
	[ -f /etc/ctdb/released_ips ] && {
		( /sbin/service nfs status > /dev/null 2>&1 && 
                      /sbin/service nfs restart > /dev/null 2>&1 ) &
	} > /dev/null 2>&1
	/bin/rm -f /etc/ctdb/released_ips
	exit 0
	;;

     shutdown)
        # shutdown any services as necessary
	exit 0
	;;
esac

echo "Invalid command $cmd"
exit 1
