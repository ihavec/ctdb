'\" t
.\"     Title: ctdb
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 05/12/2011
.\"    Manual: CTDB - clustered TDB database
.\"    Source: ctdb
.\"  Language: English
.\"
.TH "CTDB" "1" "05/12/2011" "ctdb" "CTDB \- clustered TDB database"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
ctdb \- clustered tdb database management utility
.SH "SYNOPSIS"
.HP \w'\fBctdb\ [\ OPTIONS\ ]\ COMMAND\ \&.\&.\&.\fR\ 'u
\fBctdb [ OPTIONS ] COMMAND \&.\&.\&.\fR
.HP \w'\fBctdb\fR\ 'u
\fBctdb\fR [\-n\ <node>] [\-Y] [\-t\ <timeout>] [\-T\ <timelimit>] [\-?\ \-\-help] [\-\-usage] [\-d\ \-\-debug=<INTEGER>] [\-\-socket=<filename>]
.SH "DESCRIPTION"
.PP
ctdb is a utility to view and manage a ctdb cluster\&.
.SH "OPTIONS"
.PP
\-n <pnn>
.RS 4
This specifies the physical node number on which to execute the command\&. Default is to run the command on the daemon running on the local host\&.
.sp
The physical node number is an integer that describes the node in the cluster\&. The first node has physical node number 0\&.
.RE
.PP
\-Y
.RS 4
Produce output in machine readable form for easier parsing by scripts\&. Not all commands support this option\&.
.RE
.PP
\-t <timeout>
.RS 4
How long should ctdb wait for the local ctdb daemon to respond to a command before timing out\&. Default is 3 seconds\&.
.RE
.PP
\-T <timelimit>
.RS 4
A limit on how long the ctdb command will run for before it will be aborted\&. When this timelimit has been exceeded the ctdb command will terminate\&.
.RE
.PP
\-? \-\-help
.RS 4
Print some help text to the screen\&.
.RE
.PP
\-\-usage
.RS 4
Print useage information to the screen\&.
.RE
.PP
\-d \-\-debug=<debuglevel>
.RS 4
Change the debug level for the command\&. Default is 0\&.
.RE
.PP
\-\-socket=<filename>
.RS 4
Specify the socketname to use when connecting to the local ctdb daemon\&. The default is /tmp/ctdb\&.socket \&.
.sp
You only need to specify this parameter if you run multiple ctdb daemons on the same physical host and thus can not use the default name for the domain socket\&.
.RE
.SH "ADMINISTRATIVE COMMANDS"
.PP
These are commands used to monitor and administrate a CTDB cluster\&.
.SS "pnn"
.PP
This command displays the pnn of the current node\&.
.SS "status"
.PP
This command shows the current status of the ctdb node\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBnode status\fR
.RS 4
.PP
Node status reflects the current status of the node\&. There are five possible states:
.PP
OK \- This node is fully functional\&.
.PP
DISCONNECTED \- This node could not be connected through the network and is currently not participating in the cluster\&. If there is a public IP address associated with this node it should have been taken over by a different node\&. No services are running on this node\&.
.PP
DISABLED \- This node has been administratively disabled\&. This node is still functional and participates in the CTDB cluster but its IP addresses have been taken over by a different node and no services are currently being hosted\&.
.PP
UNHEALTHY \- A service provided by this node is malfunctioning and should be investigated\&. The CTDB daemon itself is operational and participates in the cluster\&. Its public IP address has been taken over by a different node and no services are currnetly being hosted\&. All unhealthy nodes should be investigated and require an administrative action to rectify\&.
.PP
BANNED \- This node failed too many recovery attempts and has been banned from participating in the cluster for a period of RecoveryBanPeriod seconds\&. Any public IP address has been taken over by other nodes\&. This node does not provide any services\&. All banned nodes should be investigated and require an administrative action to rectify\&. This node does not perticipate in the CTDB cluster but can still be communicated with\&. I\&.e\&. ctdb commands can be sent to it\&.
.PP
STOPPED \- A node that is stopped does not host any public ip addresses, nor is it part of the VNNMAP\&. A stopped node can not become LVSMASTER, RECMASTER or NATGW\&. This node does not perticipate in the CTDB cluster but can still be communicated with\&. I\&.e\&. ctdb commands can be sent to it\&.
.PP
PARTIALLYONLINE \- A node that is partially online participates in a cluster like a node that is ok\&. Some interfaces to serve public ip addresses are down, but at least one interface is up\&. See also "ctdb ifaces"\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBgeneration\fR
.RS 4
.PP
The generation id is a number that indicates the current generation of a cluster instance\&. Each time a cluster goes through a reconfiguration or a recovery its generation id will be changed\&.
.PP
This number does not have any particular meaning other than to keep track of when a cluster has gone through a recovery\&. It is a random number that represents the current instance of a ctdb cluster and its databases\&. CTDBD uses this number internally to be able to tell when commands to operate on the cluster and the databases was issued in a different generation of the cluster, to ensure that commands that operate on the databases will not survive across a cluster database recovery\&. After a recovery, all old outstanding commands will automatically become invalid\&.
.PP
Sometimes this number will be shown as "INVALID"\&. This only means that the ctdbd daemon has started but it has not yet merged with the cluster through a recovery\&. All nodes start with generation "INVALID" and are not assigned a real generation id until they have successfully been merged with a cluster through a recovery\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBVNNMAP\fR
.RS 4
.PP
The list of Virtual Node Numbers\&. This is a list of all nodes that actively participates in the cluster and that share the workload of hosting the Clustered TDB database records\&. Only nodes that are participating in the vnnmap can become lmaster or dmaster for a database record\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRecovery mode\fR
.RS 4
.PP
This is the current recovery mode of the cluster\&. There are two possible modes:
.PP
NORMAL \- The cluster is fully operational\&.
.PP
RECOVERY \- The cluster databases have all been frozen, pausing all services while the cluster awaits a recovery process to complete\&. A recovery process should finish within seconds\&. If a cluster is stuck in the RECOVERY state this would indicate a cluster malfunction which needs to be investigated\&.
.PP
Once the recovery master detects an inconsistency, for example a node becomes disconnected/connected, the recovery daemon will trigger a cluster recovery process, where all databases are remerged across the cluster\&. When this process starts, the recovery master will first "freeze" all databases to prevent applications such as samba from accessing the databases and it will also mark the recovery mode as RECOVERY\&.
.PP
When CTDBD starts up, it will start in RECOVERY mode\&. Once the node has been merged into a cluster and all databases have been recovered, the node mode will change into NORMAL mode and the databases will be "thawed", allowing samba to access the databases again\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRecovery master\fR
.RS 4
.PP
This is the cluster node that is currently designated as the recovery master\&. This node is responsible of monitoring the consistency of the cluster and to perform the actual recovery process when reqired\&.
.PP
Only one node at a time can be the designated recovery master\&. Which node is designated the recovery master is decided by an election process in the recovery daemons running on each node\&.
.RE
.PP
Example: ctdb status
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
Number of nodes:4
pnn:0 11\&.1\&.2\&.200       OK (THIS NODE)
pnn:1 11\&.1\&.2\&.201       OK
pnn:2 11\&.1\&.2\&.202       OK
pnn:3 11\&.1\&.2\&.203       OK
Generation:1362079228
Size:4
hash:0 lmaster:0
hash:1 lmaster:1
hash:2 lmaster:2
hash:3 lmaster:3
Recovery mode:NORMAL (0)
Recovery master:0
      
.fi
.if n \{\
.RE
.\}
.SS "recmaster"
.PP
This command shows the pnn of the node which is currently the recmaster\&.
.SS "uptime"
.PP
This command shows the uptime for the ctdb daemon\&. When the last recovery or ip\-failover completed and how long it took\&. If the "duration" is shown as a negative number, this indicates that there is a recovery/failover in progress and it started that many seconds ago\&.
.PP
Example: ctdb uptime
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
Current time of node          :                Thu Oct 29 10:38:54 2009
Ctdbd start time              : (000 16:54:28) Wed Oct 28 17:44:26 2009
Time of last recovery/failover: (000 16:53:31) Wed Oct 28 17:45:23 2009
Duration of last recovery/failover: 2\&.248552 seconds
      
.fi
.if n \{\
.RE
.\}
.SS "listnodes"
.PP
This command shows lists the ip addresses of all the nodes in the cluster\&.
.PP
Example: ctdb listnodes
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
10\&.0\&.0\&.71
10\&.0\&.0\&.72
10\&.0\&.0\&.73
10\&.0\&.0\&.74
      
.fi
.if n \{\
.RE
.\}
.SS "ping"
.PP
This command will "ping" all CTDB daemons in the cluster to verify that they are processing commands correctly\&.
.PP
Example: ctdb ping
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
response from 0 time=0\&.000054 sec  (3 clients)
response from 1 time=0\&.000144 sec  (2 clients)
response from 2 time=0\&.000105 sec  (2 clients)
response from 3 time=0\&.000114 sec  (2 clients)
      
.fi
.if n \{\
.RE
.\}
.SS "ifaces"
.PP
This command will display the list of network interfaces, which could host public addresses, along with their status\&.
.PP
Example: ctdb ifaces
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
Interfaces on node 0
name:eth5 link:up references:2
name:eth4 link:down references:0
name:eth3 link:up references:1
name:eth2 link:up references:1
      
.fi
.if n \{\
.RE
.\}
.PP
Example: ctdb ifaces \-Y
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
:Name:LinkStatus:References:
:eth5:1:2
:eth4:0:0
:eth3:1:1
:eth2:1:1
      
.fi
.if n \{\
.RE
.\}
.SS "setifacelink <iface> <status>"
.PP
This command will set the status of a network interface\&. The status needs to be "up" or "down"\&. This is typically used in the 10\&.interfaces script in the "monitor" event\&.
.PP
Example: ctdb setifacelink eth0 up
.SS "ip"
.PP
This command will display the list of public addresses that are provided by the cluster and which physical node is currently serving this ip\&. By default this command will ONLY show those public addresses that are known to the node itself\&. To see the full list of all public ips across the cluster you must use "ctdb ip \-n all"\&.
.PP
Example: ctdb ip
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
Public IPs on node 0
172\&.31\&.91\&.82 node[1] active[] available[eth2,eth3] configured[eth2,eth3]
172\&.31\&.91\&.83 node[0] active[eth3] available[eth2,eth3] configured[eth2,eth3]
172\&.31\&.91\&.84 node[1] active[] available[eth2,eth3] configured[eth2,eth3]
172\&.31\&.91\&.85 node[0] active[eth2] available[eth2,eth3] configured[eth2,eth3]
172\&.31\&.92\&.82 node[1] active[] available[eth5] configured[eth4,eth5]
172\&.31\&.92\&.83 node[0] active[eth5] available[eth5] configured[eth4,eth5]
172\&.31\&.92\&.84 node[1] active[] available[eth5] configured[eth4,eth5]
172\&.31\&.92\&.85 node[0] active[eth5] available[eth5] configured[eth4,eth5]
      
.fi
.if n \{\
.RE
.\}
.PP
Example: ctdb ip \-Y
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
:Public IP:Node:ActiveInterface:AvailableInterfaces:ConfiguredInterfaces:
:172\&.31\&.91\&.82:1::eth2,eth3:eth2,eth3:
:172\&.31\&.91\&.83:0:eth3:eth2,eth3:eth2,eth3:
:172\&.31\&.91\&.84:1::eth2,eth3:eth2,eth3:
:172\&.31\&.91\&.85:0:eth2:eth2,eth3:eth2,eth3:
:172\&.31\&.92\&.82:1::eth5:eth4,eth5:
:172\&.31\&.92\&.83:0:eth5:eth5:eth4,eth5:
:172\&.31\&.92\&.84:1::eth5:eth4,eth5:
:172\&.31\&.92\&.85:0:eth5:eth5:eth4,eth5:
      
.fi
.if n \{\
.RE
.\}
.SS "ipinfo <ip>"
.PP
This command will display details about the specified public addresses\&.
.PP
Example: ctdb ipinfo 172\&.31\&.92\&.85
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
Public IP[172\&.31\&.92\&.85] info on node 0
IP:172\&.31\&.92\&.85
CurrentNode:0
NumInterfaces:2
Interface[1]: Name:eth4 Link:down References:0
Interface[2]: Name:eth5 Link:up References:2 (active)
      
.fi
.if n \{\
.RE
.\}
.SS "scriptstatus"
.PP
This command displays which scripts where run in the previous monitoring cycle and the result of each script\&. If a script failed with an error, causing the node to become unhealthy, the output from that script is also shown\&.
.PP
Example: ctdb scriptstatus
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
7 scripts were executed last monitoring cycle
00\&.ctdb              Status:OK    Duration:0\&.056 Tue Mar 24 18:56:57 2009
10\&.interface         Status:OK    Duration:0\&.077 Tue Mar 24 18:56:57 2009
11\&.natgw             Status:OK    Duration:0\&.039 Tue Mar 24 18:56:57 2009
20\&.multipathd        Status:OK    Duration:0\&.038 Tue Mar 24 18:56:57 2009
31\&.clamd             Status:DISABLED
40\&.vsftpd            Status:OK    Duration:0\&.045 Tue Mar 24 18:56:57 2009
41\&.httpd             Status:OK    Duration:0\&.039 Tue Mar 24 18:56:57 2009
50\&.samba             Status:ERROR    Duration:0\&.082 Tue Mar 24 18:56:57 2009
   OUTPUT:ERROR: Samba tcp port 445 is not responding
      
.fi
.if n \{\
.RE
.\}
.SS "disablescript <script>"
.PP
This command is used to disable an eventscript\&.
.PP
This will take effect the next time the eventscripts are being executed so it can take a short while until this is reflected in \*(Aqscriptstatus\*(Aq\&.
.SS "enablescript <script>"
.PP
This command is used to enable an eventscript\&.
.PP
This will take effect the next time the eventscripts are being executed so it can take a short while until this is reflected in \*(Aqscriptstatus\*(Aq\&.
.SS "getvar <name>"
.PP
Get the runtime value of a tuneable variable\&.
.PP
Example: ctdb getvar MaxRedirectCount
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
MaxRedirectCount    = 3
      
.fi
.if n \{\
.RE
.\}
.SS "setvar <name> <value>"
.PP
Set the runtime value of a tuneable variable\&.
.PP
Example: ctdb setvar MaxRedirectCount 5
.SS "listvars"
.PP
List all tuneable variables\&.
.PP
Example: ctdb listvars
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
MaxRedirectCount    = 3
SeqnumInterval      = 1000
ControlTimeout      = 60
TraverseTimeout     = 20
KeepaliveInterval   = 5
KeepaliveLimit      = 5
RecoverTimeout      = 20
RecoverInterval     = 1
ElectionTimeout     = 3
TakeoverTimeout     = 9
MonitorInterval     = 15
TickleUpdateInterval = 20
EventScriptTimeout  = 30
EventScriptTimeoutCount = 1
EventScriptUnhealthyOnTimeout = 0
RecoveryGracePeriod = 120
RecoveryBanPeriod   = 300
DatabaseHashSize    = 100001
DatabaseMaxDead     = 5
RerecoveryTimeout   = 10
EnableBans          = 1
DeterministicIPs    = 1
ReclockPingPeriod   = 60
NoIPFailback        = 0
DisableIPFailover   = 0
VerboseMemoryNames  = 0
RecdPingTimeout     = 60
RecdFailCount       = 10
LogLatencyMs        = 0
RecLockLatencyMs    = 1000
RecoveryDropAllIPs  = 120
VerifyRecoveryLock  = 1
VacuumDefaultInterval = 10
VacuumMaxRunTime    = 30
RepackLimit         = 10000
VacuumLimit         = 5000
VacuumMinInterval   = 10
VacuumMaxInterval   = 10
VacuumFastPathCount = 60
MaxQueueDropMsg     = 1000000
UseStatusEvents     = 0
AllowUnhealthyDBRead = 0
StatHistoryInterval = 1
DeferredAttachTO    = 120
      
.fi
.if n \{\
.RE
.\}
.SS "lvsmaster"
.PP
This command shows which node is currently the LVSMASTER\&. The LVSMASTER is the node in the cluster which drives the LVS system and which receives all incoming traffic from clients\&.
.PP
LVS is the mode where the entire CTDB/Samba cluster uses a single ip address for the entire cluster\&. In this mode all clients connect to one specific node which will then multiplex/loadbalance the clients evenly onto the other nodes in the cluster\&. This is an alternative to using public ip addresses\&. See the manpage for ctdbd for more information about LVS\&.
.SS "lvs"
.PP
This command shows which nodes in the cluster are currently active in the LVS configuration\&. I\&.e\&. which nodes we are currently loadbalancing the single ip address across\&.
.PP
LVS will by default only loadbalance across those nodes that are both LVS capable and also HEALTHY\&. Except if all nodes are UNHEALTHY in which case LVS will loadbalance across all UNHEALTHY nodes as well\&. LVS will never use nodes that are DISCONNECTED, STOPPED, BANNED or DISABLED\&.
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
2:10\&.0\&.0\&.13
3:10\&.0\&.0\&.14
      
.fi
.if n \{\
.RE
.\}
.SS "getcapabilities"
.PP
This command shows the capabilities of the current node\&. Please see manpage for ctdbd for a full list of all capabilities and more detailed description\&.
.PP
RECMASTER and LMASTER capabilities are primarily used when CTDBD is used to create a cluster spanning across WAN links\&. In which case ctdbd acts as a WAN accelerator\&.
.PP
LVS capabile means that the node is participating in LVS, a mode where the entire CTDB cluster uses one single ip address for the entire cluster instead of using public ip address failover\&. This is an alternative to using a loadbalancing layer\-4 switch\&.
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
RECMASTER: YES
LMASTER: YES
LVS: NO
      
.fi
.if n \{\
.RE
.\}
.SS "statistics"
.PP
Collect statistics from the CTDB daemon about how many calls it has served\&.
.PP
Example: ctdb statistics
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
CTDB version 1
 num_clients                        3
 frozen                             0
 recovering                         0
 client_packets_sent           360489
 client_packets_recv           360466
 node_packets_sent             480931
 node_packets_recv             240120
 keepalive_packets_sent             4
 keepalive_packets_recv             3
 node
     req_call                       2
     reply_call                     2
     req_dmaster                    0
     reply_dmaster                  0
     reply_error                    0
     req_message                   42
     req_control               120408
     reply_control             360439
 client
     req_call                       2
     req_message                   24
     req_control               360440
 timeouts
     call                           0
     control                        0
     traverse                       0
 total_calls                        2
 pending_calls                      0
 lockwait_calls                     0
 pending_lockwait_calls             0
 memory_used                     5040
 max_hop_count                      0
 max_call_latency                   4\&.948321 sec
 max_lockwait_latency               0\&.000000 sec
      
.fi
.if n \{\
.RE
.\}
.SS "statisticsreset"
.PP
This command is used to clear all statistics counters in a node\&.
.PP
Example: ctdb statisticsreset
.SS "getreclock"
.PP
This command is used to show the filename of the reclock file that is used\&.
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
Reclock file:/gpfs/\&.ctdb/shared
      
.fi
.if n \{\
.RE
.\}
.SS "setreclock [filename]"
.PP
This command is used to modify, or clear, the file that is used as the reclock file at runtime\&. When this command is used, the reclock file checks are disabled\&. To re\-enable the checks the administrator needs to activate the "VerifyRecoveryLock" tunable using "ctdb setvar"\&.
.PP
If run with no parameter this will remove the reclock file completely\&. If run with a parameter the parameter specifies the new filename to use for the recovery lock\&.
.PP
This command only affects the runtime settings of a ctdb node and will be lost when ctdb is restarted\&. For persistent changes to the reclock file setting you must edit /etc/sysconfig/ctdb\&.
.SS "getdebug"
.PP
Get the current debug level for the node\&. the debug level controls what information is written to the log file\&.
.PP
The debug levels are mapped to the corresponding syslog levels\&. When a debug level is set, only those messages at that level and higher levels will be printed\&.
.PP
The list of debug levels from highest to lowest are :
.PP
EMERG ALERT CRIT ERR WARNING NOTICE INFO DEBUG
.SS "setdebug <debuglevel>"
.PP
Set the debug level of a node\&. This controls what information will be logged\&.
.PP
The debuglevel is one of EMERG ALERT CRIT ERR WARNING NOTICE INFO DEBUG
.SS "getpid"
.PP
This command will return the process id of the ctdb daemon\&.
.SS "disable"
.PP
This command is used to administratively disable a node in the cluster\&. A disabled node will still participate in the cluster and host clustered TDB records but its public ip address has been taken over by a different node and it no longer hosts any services\&.
.SS "enable"
.PP
Re\-enable a node that has been administratively disabled\&.
.SS "stop"
.PP
This command is used to administratively STOP a node in the cluster\&. A STOPPED node is connected to the cluster but will not host any public ip addresse, nor does it participate in the VNNMAP\&. The difference between a DISABLED node and a STOPPED node is that a STOPPED node does not host any parts of the database which means that a recovery is required to stop/continue nodes\&.
.SS "continue"
.PP
Re\-start a node that has been administratively stopped\&.
.SS "addip <public_ip/mask> <iface>"
.PP
This command is used to add a new public ip to a node during runtime\&. This allows public addresses to be added to a cluster without having to restart the ctdb daemons\&.
.PP
Note that this only updates the runtime instance of ctdb\&. Any changes will be lost next time ctdb is restarted and the public addresses file is re\-read\&. If you want this change to be permanent you must also update the public addresses file manually\&.
.SS "delip <public_ip>"
.PP
This command is used to remove a public ip from a node during runtime\&. If this public ip is currently hosted by the node it being removed from, the ip will first be failed over to another node, if possible, before it is removed\&.
.PP
Note that this only updates the runtime instance of ctdb\&. Any changes will be lost next time ctdb is restarted and the public addresses file is re\-read\&. If you want this change to be permanent you must also update the public addresses file manually\&.
.SS "moveip <public_ip> <node>"
.PP
This command can be used to manually fail a public ip address to a specific node\&.
.PP
In order to manually override the "automatic" distribution of public ip addresses that ctdb normally provides, this command only works when you have changed the tunables for the daemon to:
.PP
DeterministicIPs = 0
.PP
NoIPFailback = 1
.SS "shutdown"
.PP
This command will shutdown a specific CTDB daemon\&.
.SS "recover"
.PP
This command will trigger the recovery daemon to do a cluster recovery\&.
.SS "ipreallocate"
.PP
This command will force the recovery master to perform a full ip reallocation process and redistribute all ip addresses\&. This is useful to "reset" the allocations back to its default state if they have been changed using the "moveip" command\&. While a "recover" will also perform this reallocation, a recovery is much more hevyweight since it will also rebuild all the databases\&.
.SS "setlmasterrole <on|off>"
.PP
This command is used ot enable/disable the LMASTER capability for a node at runtime\&. This capability determines whether or not a node can be used as an LMASTER for records in the database\&. A node that does not have the LMASTER capability will not show up in the vnnmap\&.
.PP
Nodes will by default have this capability, but it can be stripped off nodes by the setting in the sysconfig file or by using this command\&.
.PP
Once this setting has been enabled/disabled, you need to perform a recovery for it to take effect\&.
.PP
See also "ctdb getcapabilities"
.SS "setrecmasterrole <on|off>"
.PP
This command is used ot enable/disable the RECMASTER capability for a node at runtime\&. This capability determines whether or not a node can be used as an RECMASTER for the cluster\&. A node that does not have the RECMASTER capability can not win a recmaster election\&. A node that already is the recmaster for the cluster when the capability is stripped off the node will remain the recmaster until the next cluster election\&.
.PP
Nodes will by default have this capability, but it can be stripped off nodes by the setting in the sysconfig file or by using this command\&.
.PP
See also "ctdb getcapabilities"
.SS "killtcp <srcip:port> <dstip:port>"
.PP
This command will kill the specified TCP connection by issuing a TCP RST to the srcip:port endpoint\&. This is a command used by the ctdb eventscripts\&.
.SS "gratiousarp <ip> <interface>"
.PP
This command will send out a gratious arp for the specified interface through the specified interface\&. This command is mainly used by the ctdb eventscripts\&.
.SS "reloadnodes"
.PP
This command is used when adding new nodes, or removing existing nodes from an existing cluster\&.
.PP
Procedure to add a node:
.PP
1, To expand an existing cluster, first ensure with \*(Aqctdb status\*(Aq that all nodes are up and running and that they are all healthy\&. Do not try to expand a cluster unless it is completely healthy!
.PP
2, On all nodes, edit /etc/ctdb/nodes and add the new node as the last entry to the file\&. The new node MUST be added to the end of this file!
.PP
3, Verify that all the nodes have identical /etc/ctdb/nodes files after you edited them and added the new node!
.PP
4, Run \*(Aqctdb reloadnodes\*(Aq to force all nodes to reload the nodesfile\&.
.PP
5, Use \*(Aqctdb status\*(Aq on all nodes and verify that they now show the additional node\&.
.PP
6, Install and configure the new node and bring it online\&.
.PP
Procedure to remove a node:
.PP
1, To remove a node from an existing cluster, first ensure with \*(Aqctdb status\*(Aq that all nodes, except the node to be deleted, are up and running and that they are all healthy\&. Do not try to remove a node from a cluster unless the cluster is completely healthy!
.PP
2, Shutdown and poweroff the node to be removed\&.
.PP
3, On all other nodes, edit the /etc/ctdb/nodes file and comment out the node to be removed\&. Do not delete the line for that node, just comment it out by adding a \*(Aq#\*(Aq at the beginning of the line\&.
.PP
4, Run \*(Aqctdb reloadnodes\*(Aq to force all nodes to reload the nodesfile\&.
.PP
5, Use \*(Aqctdb status\*(Aq on all nodes and verify that the deleted node no longer shows up in the list\&.\&.
.PP
.SS "tickle <srcip:port> <dstip:port>"
.PP
This command will will send a TCP tickle to the source host for the specified TCP connection\&. A TCP tickle is a TCP ACK packet with an invalid sequence and acknowledge number and will when received by the source host result in it sending an immediate correct ACK back to the other end\&.
.PP
TCP tickles are useful to "tickle" clients after a IP failover has occured since this will make the client immediately recognize the TCP connection has been disrupted and that the client will need to reestablish\&. This greatly speeds up the time it takes for a client to detect and reestablish after an IP failover in the ctdb cluster\&.
.SS "gettickles <ip>"
.PP
This command is used to show which TCP connections are registered with CTDB to be "tickled" if there is a failover\&.
.SS "repack [max_freelist]"
.PP
Over time, when records are created and deleted in a TDB, the TDB list of free space will become fragmented\&. This can lead to a slowdown in accessing TDB records\&. This command is used to defragment a TDB database and pruning the freelist\&.
.PP
If [max_freelist] is specified, then a database will only be repacked if it has more than this number of entries in the freelist\&.
.PP
During repacking of the database, the entire TDB database will be locked to prevent writes\&. If samba tries to write to a record in the database during a repack operation, samba will block until the repacking has completed\&.
.PP
This command can be disruptive and can cause samba to block for the duration of the repack operation\&. In general, a repack operation will take less than one second to complete\&.
.PP
A repack operation will only defragment the local TDB copy of the CTDB database\&. You need to run this command on all of the nodes to repack a CTDB database completely\&.
.PP
Example: ctdb repack 1000
.PP
By default, this operation is issued from the 00\&.ctdb event script every 5 minutes\&.
.SS "vacuum [max_records]"
.PP
Over time CTDB databases will fill up with empty deleted records which will lead to a progressive slow down of CTDB database access\&. This command is used to prune all databases and delete all empty records from the cluster\&.
.PP
By default, vacuum will delete all empty records from all databases\&. If [max_records] is specified, the command will only delete the first [max_records] empty records for each database\&.
.PP
Vacuum only deletes records where the local node is the lmaster\&. To delete all records from the entire cluster you need to run a vacuum from each node\&. This command is not disruptive\&. Samba is unaffected and will still be able to read/write records normally while the database is being vacuumed\&.
.PP
Example: ctdb vacuum
.PP
By default, this operation is issued from the 00\&.ctdb event script every 5 minutes\&.
.SS "backupdb <dbname> <file>"
.PP
This command can be used to copy the entire content of a database out to a file\&. This file can later be read back into ctdb using the restoredb command\&. This is mainly useful for backing up persistent databases such as secrets\&.tdb and similar\&.
.SS "restoredb <file> [<dbname>]"
.PP
This command restores a persistent database that was previously backed up using backupdb\&. By default the data will be restored back into the same database as it was created from\&. By specifying dbname you can restore the data into a different database\&.
.SS "wipedb <dbname>"
.PP
This command can be used to remove all content of a database\&.
.SS "getlog <level>"
.PP
In addition to the normal loggign to a log file, CTDBD also keeps a in\-memory ringbuffer containing the most recent log entries for all log levels (except DEBUG)\&.
.PP
This is useful since it allows for keeping continuous logs to a file at a reasonable non\-verbose level, but shortly after an incident has occured, a much more detailed log can be pulled from memory\&. This can allow you to avoid having to reproduce an issue due to the on\-disk logs being of insufficient detail\&.
.PP
This command extracts all messages of level or lower log level from memory and prints it to the screen\&.
.SS "clearlog"
.PP
This command clears the in\-memory logging ringbuffer\&.
.SH "DEBUGGING COMMANDS"
.PP
These commands are primarily used for CTDB development and testing and should not be used for normal administration\&.
.SS "process\-exists <pid>"
.PP
This command checks if a specific process exists on the CTDB host\&. This is mainly used by Samba to check if remote instances of samba are still running or not\&.
.SS "getdbmap"
.PP
This command lists all clustered TDB databases that the CTDB daemon has attached to\&. Some databases are flagged as PERSISTENT, this means that the database stores data persistently and the data will remain across reboots\&. One example of such a database is secrets\&.tdb where information about how the cluster was joined to the domain is stored\&.
.PP
If a PERSISTENT database is not in a healthy state the database is flagged as UNHEALTHY\&. If there\*(Aqs at least one completely healthy node running in the cluster, it\*(Aqs possible that the content is restored by a recovery run automaticly\&. Otherwise an administrator needs to analyze the problem\&.
.PP
See also "ctdb getdbstatus", "ctdb backupdb", "ctdb restoredb", "ctdb dumpbackup", "ctdb wipedb", "ctdb setvar AllowUnhealthyDBRead 1" and (if samba or tdb\-utils are installed) "tdbtool check"\&.
.PP
Most databases are not persistent and only store the state information that the currently running samba daemons need\&. These databases are always wiped when ctdb/samba starts and when a node is rebooted\&.
.PP
Example: ctdb getdbmap
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
Number of databases:10
dbid:0x435d3410 name:notify\&.tdb path:/var/ctdb/notify\&.tdb\&.0 
dbid:0x42fe72c5 name:locking\&.tdb path:/var/ctdb/locking\&.tdb\&.0
dbid:0x1421fb78 name:brlock\&.tdb path:/var/ctdb/brlock\&.tdb\&.0 
dbid:0x17055d90 name:connections\&.tdb path:/var/ctdb/connections\&.tdb\&.0 
dbid:0xc0bdde6a name:sessionid\&.tdb path:/var/ctdb/sessionid\&.tdb\&.0 
dbid:0x122224da name:test\&.tdb path:/var/ctdb/test\&.tdb\&.0 
dbid:0x2672a57f name:idmap2\&.tdb path:/var/ctdb/persistent/idmap2\&.tdb\&.0 PERSISTENT
dbid:0xb775fff6 name:secrets\&.tdb path:/var/ctdb/persistent/secrets\&.tdb\&.0 PERSISTENT
dbid:0xe98e08b6 name:group_mapping\&.tdb path:/var/ctdb/persistent/group_mapping\&.tdb\&.0 PERSISTENT
dbid:0x7bbbd26c name:passdb\&.tdb path:/var/ctdb/persistent/passdb\&.tdb\&.0 PERSISTENT
      
.fi
.if n \{\
.RE
.\}
.PP
Example output for an unhealthy database:
.sp
.if n \{\
.RS 4
.\}
.nf
Number of databases:1
dbid:0xb775fff6 name:secrets\&.tdb path:/var/ctdb/persistent/secrets\&.tdb\&.0 PERSISTENT UNHEALTHY
      
.fi
.if n \{\
.RE
.\}
.PP
Example output for a healthy database as machinereadable output \-Y:
.sp
.if n \{\
.RS 4
.\}
.nf
:ID:Name:Path:Persistent:Unhealthy:
:0x7bbbd26c:passdb\&.tdb:/var/ctdb/persistent/passdb\&.tdb\&.0:1:0:
      
.fi
.if n \{\
.RE
.\}
.SS "getdbstatus <dbname>"
.PP
This command displays more details about a database\&.
.PP
Example: ctdb getdbstatus test\&.tdb\&.0
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
dbid: 0x122224da
name: test\&.tdb
path: /var/ctdb/test\&.tdb\&.0
PERSISTENT: no
HEALTH: OK
      
.fi
.if n \{\
.RE
.\}
.PP
Example: ctdb getdbstatus registry\&.tdb (with a corrupted TDB)
.PP
Example output:
.sp
.if n \{\
.RS 4
.\}
.nf
dbid: 0xf2a58948
name: registry\&.tdb
path: /var/ctdb/persistent/registry\&.tdb\&.0
PERSISTENT: yes
HEALTH: NO\-HEALTHY\-NODES \- ERROR \- Backup of corrupted TDB in \*(Aq/var/ctdb/persistent/registry\&.tdb\&.0\&.corrupted\&.20091208091949\&.0Z\*(Aq
      
.fi
.if n \{\
.RE
.\}
.SS "catdb <dbname>"
.PP
This command will dump a clustered TDB database to the screen\&. This is a debugging command\&.
.SS "dumpdbbackup <backup\-file>"
.PP
This command will dump the content of database backup to the screen (similar to ctdb catdb)\&. This is a debugging command\&.
.SS "getmonmode"
.PP
This command returns the monutoring mode of a node\&. The monitoring mode is either ACTIVE or DISABLED\&. Normally a node will continuously monitor that all other nodes that are expected are in fact connected and that they respond to commands\&.
.PP
ACTIVE \- This is the normal mode\&. The node is actively monitoring all other nodes, both that the transport is connected and also that the node responds to commands\&. If a node becomes unavailable, it will be marked as DISCONNECTED and a recovery is initiated to restore the cluster\&.
.PP
DISABLED \- This node is not monitoring that other nodes are available\&. In this mode a node failure will not be detected and no recovery will be performed\&. This mode is useful when for debugging purposes one wants to attach GDB to a ctdb process but wants to prevent the rest of the cluster from marking this node as DISCONNECTED and do a recovery\&.
.SS "setmonmode <0|1>"
.PP
This command can be used to explicitly disable/enable monitoring mode on a node\&. The main purpose is if one wants to attach GDB to a running ctdb daemon but wants to prevent the other nodes from marking it as DISCONNECTED and issuing a recovery\&. To do this, set monitoring mode to 0 on all nodes before attaching with GDB\&. Remember to set monitoring mode back to 1 afterwards\&.
.SS "attach <dbname> [persistent]"
.PP
This is a debugging command\&. This command will make the CTDB daemon create a new CTDB database and attach to it\&.
.SS "dumpmemory"
.PP
This is a debugging command\&. This command will make the ctdb daemon to write a fill memory allocation map to standard output\&.
.SS "rddumpmemory"
.PP
This is a debugging command\&. This command will dump the talloc memory allocation tree for the recovery daemon to standard output\&.
.SS "thaw"
.PP
Thaw a previously frozen node\&.
.SS "eventscript <arguments>"
.PP
This is a debugging command\&. This command can be used to manually invoke and run the eventscritps with arbitrary arguments\&.
.SS "ban <bantime|0>"
.PP
Administratively ban a node for bantime seconds\&. A bantime of 0 means that the node should be permanently banned\&.
.PP
A banned node does not participate in the cluster and does not host any records for the clustered TDB\&. Its ip address has been taken over by another node and no services are hosted\&.
.PP
Nodes are automatically banned if they are the cause of too many cluster recoveries\&.
.SS "unban"
.PP
This command is used to unban a node that has either been administratively banned using the ban command or has been automatically banned by the recovery daemon\&.
.SH "SEE ALSO"
.PP
ctdbd(1), onnode(1)
\m[blue]\fB\%http://ctdb.samba.org/\fR\m[]
.SH "COPYRIGHT/LICENSE"
.sp
.if n \{\
.RS 4
.\}
.nf
Copyright (C) Andrew Tridgell 2007
Copyright (C) Ronnie sahlberg 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version\&.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&.  See the GNU
General Public License for more details\&.

You should have received a copy of the GNU General Public License
along with this program; if not, see http://www\&.gnu\&.org/licenses/\&.
.fi
.if n \{\
.RE
.\}
