.\"     Title: ctdb
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.71.0 <http://docbook.sf.net/>
.\"      Date: 01/16/2008
.\"    Manual: 
.\"    Source: 
.\"
.TH "CTDB" "1" "01/16/2008" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
ctdb \- clustered tdb database management utility
.SH "SYNOPSIS"
.HP 29
\fBctdb [ OPTIONS ] COMMAND ...\fR
.HP 5
\fBctdb\fR [\-n\ <node>] [\-Y] [\-t\ <timeout>] [\-T\ <timelimit>] [\-?\ \-\-help] [\-\-usage] [\-d\ \-\-debug=<INTEGER>] [\-\-socket=<filename>]
.SH "DESCRIPTION"
.PP
ctdb is a utility to view and manage a ctdb cluster.
.SH "OPTIONS"
.PP
\-n <pnn>
.RS 3n
This specifies the physical node number on which to execute the command. Default is to run the command on the deamon running on the local host.
.sp
The physical node number is an integer that describes the node in the cluster. The first node has physical node number 0.
.RE
.PP
\-Y
.RS 3n
Produce output in machine readable form for easier parsing by scripts. Not all commands support this option.
.RE
.PP
\-t <timeout>
.RS 3n
How long should ctdb wait for the local ctdb daemon to respond to a command before timing out. Default is 3 seconds.
.RE
.PP
\-T <timelimit>
.RS 3n
A limit on how long the ctdb command will run for before it will be aborted. When this timelimit has been exceeded the ctdb command will terminate.
.RE
.PP
\-? \-\-help
.RS 3n
Print some help text to the screen.
.RE
.PP
\-\-usage
.RS 3n
Print useage information to the screen.
.RE
.PP
\-d \-\-debug=<debuglevel>
.RS 3n
Change the debug level for the command. Default is 0.
.RE
.PP
\-\-socket=<filename>
.RS 3n
Specify the socketname to use when connecting to the local ctdb daemon. The default is /tmp/ctdb.socket .
.sp
You only need to specify this parameter if you run multiple ctdb daemons on the same physical host and thus can not use the default name for the domain socket.
.RE
.SH "ADMINISTRATIVE COMMANDS"
.PP
These are commands used to monitor and administrate a CTDB cluster.
.SS "status"
.PP
This command shows the current status of the ctdb node.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBnode status\fR
.RS
.PP
Node status reflects the current status of the node. There are four possible states:
.PP
OK \- This node is fully functional.
.PP
DISCONNECTED \- This node could not be connected through the network and is currently not participating in the cluster. If there is a public IP address associated with this node it should have been taken over by a different node. No services are running on this node.
.PP
DISABLED \- This node has been administratively disabled. This node is still functional and participates in the CTDB cluster but its IP addresses have been taken over by a different node and no services are currently being hosted.
.PP
UNHEALTHY \- A service provided by this node is malfunctioning and should be investigated. The CTDB daemon itself is operational and participates in the cluster. Its public IP address has been taken over by a different node and no services are currnetly being hosted. All unhealthy nodes should be investigated and require an administrative action to rectify.
.PP
BANNED \- This node failed too many recovery attempts and has been banned from participating in the cluster for a period of RecoveryBanPeriod seconds. Any public IP address has been taken over by other nodes. This node does not provide any services. All banned nodes should be investigated and require an administrative action to rectify. This node does not perticipate in the CTDB cluster but can still be communicated with. I.e. ctdb commands can be sent to it.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBgeneration\fR
.RS
.PP
The generation id is a number that indicates the current generation of a cluster instance. Each time a cluster goes through a reconfiguration or a recovery its generation id will be changed.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBVNNMAP\fR
.RS
.PP
The list of Virtual Node Numbers. This is a list of all nodes that actively participates in the cluster and that share the workload of hosting the Clustered TDB database records. Only nodes that are participating in the vnnmap can become lmaster or dmaster for a database record.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBRecovery mode\fR
.RS
.PP
This is the current recovery mode of the cluster. There are two possible modes:
.PP
NORMAL \- The cluster is fully operational.
.PP
RECOVERY \- The cluster databases have all been frozen, pausing all services while the cluster awaits a recovery process to complete. A recovery process should finish within seconds. If a cluster is stuck in the RECOVERY state this would indicate a cluster malfunction which needs to be investigated.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBRecovery master\fR
.RS
.PP
This is the cluster node that is currently designated as the recovery master. This node is responsible of monitoring the consistency of the cluster and to perform the actual recovery process when reqired.
.RE
.PP
Example: ctdb status
.PP
Example output:
.sp
.RS 3n
.nf
Number of nodes:4
pnn:0 11.1.2.200       OK (THIS NODE)
pnn:1 11.1.2.201       OK
pnn:2 11.1.2.202       OK
pnn:3 11.1.2.203       OK
Generation:1362079228
Size:4
hash:0 lmaster:0
hash:1 lmaster:1
hash:2 lmaster:2
hash:3 lmaster:3
Recovery mode:NORMAL (0)
Recovery master:0
      
.fi
.RE
.SS "ping"
.PP
This command will "ping" all CTDB daemons in the cluster to verify that they are processing commands correctly.
.PP
Example: ctdb ping
.PP
Example output:
.sp
.RS 3n
.nf
response from 0 time=0.000054 sec  (3 clients)
response from 1 time=0.000144 sec  (2 clients)
response from 2 time=0.000105 sec  (2 clients)
response from 3 time=0.000114 sec  (2 clients)
      
.fi
.RE
.SS "ip"
.PP
This command will display the list of public addresses that are provided by the cluster and which physical node is currently serving this ip.
.PP
Example: ctdb ip
.PP
Example output:
.sp
.RS 3n
.nf
Number of addresses:4
12.1.1.1         0
12.1.1.2         1
12.1.1.3         2
12.1.1.4         3
      
.fi
.RE
.SS "getvar <name>"
.PP
Get the runtime value of a tuneable variable.
.PP
Example: ctdb getvar MaxRedirectCount
.PP
Example output:
.sp
.RS 3n
.nf
MaxRedirectCount    = 3
      
.fi
.RE
.SS "setvar <name> <value>"
.PP
Set the runtime value of a tuneable variable.
.PP
Example: ctdb setvar MaxRedirectCount 5
.SS "listvars"
.PP
List all tuneable variables.
.PP
Example: ctdb listvars
.PP
Example output:
.sp
.RS 3n
.nf
MaxRedirectCount    = 5
SeqnumFrequency     = 1
ControlTimeout      = 60
TraverseTimeout     = 20
KeepaliveInterval   = 2
KeepaliveLimit      = 3
MaxLACount          = 7
RecoverTimeout      = 5
RecoverInterval     = 1
ElectionTimeout     = 3
TakeoverTimeout     = 5
MonitorInterval     = 15
EventScriptTimeout  = 20
RecoveryGracePeriod = 60
RecoveryBanPeriod   = 300
      
.fi
.RE
.SS "statistics"
.PP
Collect statistics from the CTDB daemon about how many calls it has served.
.PP
Example: ctdb statistics
.PP
Example output:
.sp
.RS 3n
.nf
CTDB version 1
 num_clients                        3
 frozen                             0
 recovering                         0
 client_packets_sent           360489
 client_packets_recv           360466
 node_packets_sent             480931
 node_packets_recv             240120
 keepalive_packets_sent             4
 keepalive_packets_recv             3
 node
     req_call                       2
     reply_call                     2
     req_dmaster                    0
     reply_dmaster                  0
     reply_error                    0
     req_message                   42
     req_control               120408
     reply_control             360439
 client
     req_call                       2
     req_message                   24
     req_control               360440
 timeouts
     call                           0
     control                        0
     traverse                       0
 total_calls                        2
 pending_calls                      0
 lockwait_calls                     0
 pending_lockwait_calls             0
 memory_used                     5040
 max_hop_count                      0
 max_call_latency                   4.948321 sec
 max_lockwait_latency               0.000000 sec
      
.fi
.RE
.SS "statisticsreset"
.PP
This command is used to clear all statistics counters in a node.
.PP
Example: ctdb statisticsreset
.SS "getdebug"
.PP
Get the current debug level for the node. the debug level controls what information is written to the log file.
.SS "setdebug <debuglevel>"
.PP
Set the debug level of a node. This is a number between 0 and 9 and controls what information will be written to the logfile.
.SS "getpid"
.PP
This command will return the process id of the ctdb daemon.
.SS "disable"
.PP
This command is used to administratively disable a node in the cluster. A disabled node will still participate in the cluster and host clustered TDB records but its public ip address has been taken over by a different node and it no longer hosts any services.
.SS "enable"
.PP
Re\-enable a node that has been administratively disabled.
.SS "ban <bantime|0>"
.PP
Administratively ban a node for bantime seconds. A bantime of 0 means that the node should be permanently banned.
.PP
A banned node does not participate in the cluster and does not host any records for the clustered TDB. Its ip address has been taken over by an other node and no services are hosted.
.PP
Nodes are automatically banned if they are the cause of too many cluster recoveries.
.SS "unban"
.PP
This command is used to unban a node that has either been administratively banned using the ban command or has been automatically banned by the recovery daemon.
.SS "shutdown"
.PP
This command will shutdown a specific CTDB daemon.
.SS "recover"
.PP
This command will trigger the recovery daemon to do a cluster recovery.
.SS "killtcp <srcip:port> <dstip:port>"
.PP
This command will kill the specified TCP connection by issuing a TCP RST to the srcip:port endpoint.
.SS "tickle <srcip:port> <dstip:port>"
.PP
This command will will send a TCP tickle to the source host for the specified TCP connection. A TCP tickle is a TCP ACK packet with an invalid sequence and acknowledge number and will when received by the source host result in it sending an immediate correct ACK back to the other end.
.PP
TCP tickles are useful to "tickle" clients after a IP failover has occured since this will make the client immediately recognize the TCP connection has been disrupted and that the client will need to reestablish. This greatly speeds up the time it takes for a client to detect and reestablish after an IP failover in the ctdb cluster.
.SS "repack [max_freelist]"
.PP
Over time, when records are created and deleted in a TDB, the TDB list of free space will become fragmented. This can lead to a slowdown in accessing TDB records. This command is used to defragment a TDB database and pruning the freelist.
.PP
If [max_freelist] is specified, then a database will only be repacked if it has more than this number of entries in the freelist.
.PP
During repacking of the database, the entire TDB database will be locked to prevent writes. If samba tries to write to a record in the database during a repack operation, samba will block until the repacking has completed.
.PP
This command can be disruptive and can cause samba to block for the duration of the repack operation. In general, a repack operation will take less than one second to complete.
.PP
A repack operation will only defragment the local TDB copy of the CTDB database. You need to run this command on all of the nodes to repack a CTDB database completely.
.PP
Example: ctdb repack 1000
.PP
By default, this operation is issued from the 00.ctdb event script every 5 minutes.
.SS "vacuum [max_records]"
.PP
Over time CTDB databases will fill up with empty deleted records which will lead to a progressive slow down of CTDB database access. This command is used to prune all databases and delete all empty records from the cluster.
.PP
By default, vacuum will delete all empty records from all databases. If [max_records] is specified, the command will only delete the first [max_records] empty records for each database.
.PP
Vacuum only deletes records where the local node is the lmaster. To delete all records from the entire cluster you need to run a vacuum from each node. This command is not disruptive. Samba is unaffected and will still be able to read/write records normally while the database is being vacuumed.
.PP
Example: ctdb vacuum
.PP
By default, this operation is issued from the 00.ctdb event script every 5 minutes.
.SH "DEBUGGING COMMANDS"
.PP
These commands are primarily used for CTDB development and testing and should not be used for normal administration.
.SS "process\-exists <pid>"
.PP
This command checks if a specific process exists on the CTDB host. This is mainly used by Samba to check if remote instances of samba are still running or not.
.SS "getdbmap"
.PP
This command lists all clustered TDB databases that the CTDB daemon has attached to. Some databases are flagged as PERSISTENT, this means that the database stores data persistently and the data will remain across reboots. One example of such a database is secrets.tdb where information about how the cluster was joined to the domain is stored.
.PP
Most databases are not persistent and only store the state information that the currently running samba daemons need. These databases are always wiped when ctdb/samba starts and when a node is rebooted.
.PP
Example: ctdb getdbmap
.PP
Example output:
.sp
.RS 3n
.nf
Number of databases:10
dbid:0x435d3410 name:notify.tdb path:/var/ctdb/notify.tdb.0 
dbid:0x42fe72c5 name:locking.tdb path:/var/ctdb/locking.tdb.0 dbid:0x1421fb78 name:brlock.tdb path:/var/ctdb/brlock.tdb.0 
dbid:0x17055d90 name:connections.tdb path:/var/ctdb/connections.tdb.0 
dbid:0xc0bdde6a name:sessionid.tdb path:/var/ctdb/sessionid.tdb.0 
dbid:0x122224da name:test.tdb path:/var/ctdb/test.tdb.0 
dbid:0x2672a57f name:idmap2.tdb path:/var/ctdb/persistent/idmap2.tdb.0 PERSISTENT
dbid:0xb775fff6 name:secrets.tdb path:/var/ctdb/persistent/secrets.tdb.0 PERSISTENT
dbid:0xe98e08b6 name:group_mapping.tdb path:/var/ctdb/persistent/group_mapping.tdb.0 PERSISTENT
dbid:0x7bbbd26c name:passdb.tdb path:/var/ctdb/persistent/passdb.tdb.0 PERSISTENT
      
.fi
.RE
.SS "catdb <dbname>"
.PP
This command will dump a clustered TDB database to the screen. This is a debugging command.
.SS "getmonmode"
.PP
This command returns the monutoring mode of a node. The monitoring mode is either ACTIVE or DISABLED. Normally a node will continously monitor that all other nodes that are expected are in fact connected and that they respond to commands.
.PP
ACTIVE \- This is the normal mode. The node is actively monitoring all other nodes, both that the transport is connected and also that the node responds to commands. If a node becomes unavailable, it will be marked as DISCONNECTED and a recovery is initiated to restore the cluster.
.PP
DISABLED \- This node is not monitoring that other nodes are available. In this mode a node failure will not be detected and no recovery will be performed. This mode is useful when for debugging purposes one wants to attach GDB to a ctdb process but wants to prevent the rest of the cluster from marking this node as DISCONNECTED and do a recovery.
.SS "setmonmode <0|1>"
.PP
This command can be used to explicitely disable/enable monitoring mode on a node. The main purpose is if one wants to attach GDB to a running ctdb daemon but wants to prevent the other nodes from marking it as DISCONNECTED and issuing a recovery. To do this, set monitoring mode to 0 on all nodes before attaching with GDB. Remember to set monitoring mode back to 1 afterwards.
.SS "attach <dbname>"
.PP
This is a debugging command. This command will make the CTDB daemon create a new CTDB database and attach to it.
.SS "dumpmemory"
.PP
This is a debugging command. This command will make the ctdb daemon to write a fill memory allocation map to the log file.
.SS "freeze"
.PP
This command will lock all the local TDB databases causing clients that are accessing these TDBs such as samba3 to block until the databases are thawed.
.PP
This is primarily used by the recovery daemon to stop all samba daemons from accessing any databases while the database is recovered and rebuilt.
.SS "thaw"
.PP
Thaw a previously frozen node.
.SH "SEE ALSO"
.PP
ctdbd(1), onnode(1)
\fI\%http://ctdb.samba.org/\fR
.SH "COPYRIGHT/LICENSE"
.sp
.RS 3n
.nf
Copyright (C) Andrew Tridgell 2007
Copyright (C) Ronnie sahlberg 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see http://www.gnu.org/licenses/.
.fi
.RE
