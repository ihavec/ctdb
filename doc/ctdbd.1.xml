<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<refentry id="ctdbd.1">

<refmeta>
	<refentrytitle>ctdbd</refentrytitle>
	<manvolnum>1</manvolnum>
</refmeta>


<refnamediv>
	<refname>ctdbd</refname>
	<refpurpose>The CTDB cluster daemon</refpurpose>
</refnamediv>

<refsynopsisdiv>
	<cmdsynopsis>
		<command>ctdbd</command>
	</cmdsynopsis>
	
	<cmdsynopsis>
		<command>ctdbd</command>
		<arg choice="opt">-? --help</arg>
		<arg choice="opt">-d --debug=&lt;INTEGER&gt;</arg>
		<arg choice="req">--dbdir=&lt;directory&gt;</arg>
		<arg choice="req">--dbdir-persistent=&lt;directory&gt;</arg>
		<arg choice="opt">--event-script-dir=&lt;directory&gt;</arg>
		<arg choice="opt">-i --interactive</arg>
		<arg choice="opt">--listen=&lt;address&gt;</arg>
		<arg choice="opt">--logfile=&lt;filename&gt;</arg>
		<arg choice="req">--nlist=&lt;filename&gt;</arg>
		<arg choice="opt">--nosetsched</arg>
		<arg choice="opt">--public-addresses=&lt;filename&gt;</arg>
		<arg choice="opt">--public-interface=&lt;interface&gt;</arg>
		<arg choice="req">--reclock=&lt;filename&gt;</arg>
		<arg choice="opt">--single-public-ip=&lt;address&gt;</arg>
		<arg choice="opt">--socket=&lt;filename&gt;</arg>
		<arg choice="opt">--start-as-disabled</arg>
		<arg choice="opt">--syslog</arg>
		<arg choice="opt">--torture</arg>
		<arg choice="opt">--transport=&lt;STRING&gt;</arg>
		<arg choice="opt">--usage</arg>
	</cmdsynopsis>
	
</refsynopsisdiv>

  <refsect1><title>DESCRIPTION</title>
    <para>
      ctdbd is the main ctdb daemon.
    </para>
    <para>
      ctdbd provides a clustered version of the TDB database with automatic rebuild/recovery of the databases upon nodefailures.
    </para>
    <para>
      Combined with a cluster filesystem ctdbd provides a full HA environment for services such as clustered Samba and NFS as well as other services.
    </para>
    <para>
      ctdbd provides monitoring of all nodes in the cluster and automatically reconfigures the cluster and recovers upon node failures.
    </para>
    <para>
      ctdbd is the main component in clustered Samba that provides a high-awailability load-sharing CIFS server cluster.
    </para>
  </refsect1>


  <refsect1>
    <title>OPTIONS</title>

    <variablelist>
      <varlistentry><term>-? --help</term>
        <listitem>
          <para>
            Print some help text to the screen.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>-d --debug=&lt;DEBUGLEVEL&gt;</term>
        <listitem>
          <para>
            This option sets the debuglevel on the ctdbd daemon which controls what will be written to the logfile. The default is 0 which will only log important events and errors. A larger number will provide additional logging.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--dbdir=&lt;directory&gt;</term>
        <listitem>
          <para>
            This is the directory on local storage where ctdbd keeps the local
            copy of the TDB databases. This directory is local for each node and should not be stored on the shared cluster filesystem.
          </para>
          <para>
            This directory would usually be /var/ctdb .
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--dbdir-persistent=&lt;directory&gt;</term>
        <listitem>
          <para>
            This is the directory on local storage where ctdbd keeps the local
            copy of the persistent TDB databases. This directory is local for each node and should not be stored on the shared cluster filesystem.
          </para>
          <para>
            This directory would usually be /etc/ctdb/persistent .
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--event-script-dir=&lt;directory&gt;</term>
        <listitem>
          <para>
            This option is used to specify the directory where the CTDB event
	    scripts are stored.
          </para>
          <para>
            This will normally be /etc/ctdb/events.d which is part of the ctdb distribution.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>-i --interactive</term>
        <listitem>
          <para>
            By default ctdbd will detach itself from the shell and run in
            the background as a daemon. This option makes ctdbd to start in interactive mode.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--listen=&lt;address&gt;</term>
        <listitem>
          <para>
            This specifies which ip address ctdb will bind to. By default ctdbd will bind to the first address it finds in the /etc/ctdb/nodes file and which is also present on the local system in which case you do not need to provide this option.
          </para>
          <para>
            This option is only required when you want to run multiple ctdbd daemons/nodes on the same physical host in which case there would be multiple entries in /etc/ctdb/nodes what would match a local interface.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--logfile=&lt;filename&gt;</term>
        <listitem>
          <para>
            This is the file where ctdbd will write its log. This is usually /var/log/log.ctdb .
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--nlist=&lt;filename&gt;</term>
        <listitem>
          <para>
            This file contains a list of the private ip addresses of every node in the cluster. There is one line/ip address for each node. This file must be the same for all nodes in the cluster.
          </para>
          <para>
            This file is usually /etc/ctdb/nodes .
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--nosetsched</term>
        <listitem>
          <para>
	    This is a ctdbd debugging option. this option is only used when
	    debugging ctdbd.
	  </para>
	  <para>
            Normally ctdb will change its scheduler to run as a real-time 
	    process. This is the default mode for a normal ctdbd operation
	    to gurarantee that ctdbd always gets the cpu cycles that it needs.
          </para>
          <para>
	    This option is used to tell ctdbd to NOT run as a real-time process
	    and instead run ctdbd as a normal userspace process.
	    This is useful for debugging and when you want to run ctdbd under
	    valgrind or gdb. (You dont want to attach valgrind or gdb to a
	    real-time process.)
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--public_addresses=&lt;filename&gt;</term>
        <listitem>
          <para>
            When used with IP takeover this specifies a file containing the public ip addresses to use on the cluster. This file contains a list of ip addresses netmasks and interfaces. When ctdb is operational it will distribute these public ip addresses evenly across the available nodes.
          </para>
          <para>
            This is usually the file /etc/ctdb/public_addresses
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--public-interface=&lt;interface&gt;</term>
        <listitem>
          <para>
            This option tells ctdb which interface to attach public-addresses
	    to and also where to attach the single-public-ip when used.
	    </para>
	    <para>
	    This is only required when using public ip addresses and only when
	    you dont specify the interface explicitely on in /etc/ctdb/public_addresses or when you are using --single-public-ip.
          </para>
          <para>
	  If you omit this argument when using public addresses or single public ip, ctdb will not be able to send out Gratious ARPs correctly or be able to kill tcp connections correctly which will lead to application failures. 
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--reclock=&lt;filename&gt;</term>
        <listitem>
          <para>
            This is the name of the lock file stored of the shared cluster filesystem that ctdbd uses to arbitrate which node has the role of recovery-master.
            This file must be stored on shared storage.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--single-public-ip=&lt;address&gt;</term>
        <listitem>
          <para>
            This option is used to activate the "ipmux" or the "lvs"
	    functionality of ctdb where the cluster provides a single 
	    public ip address for the entire cluster. When using this option
	    you must also use the --public-interface option.
	    </para>
	    <para>
            In this mode, all nodes of the cluster will expose a single
            ip address from all nodes with all incoming traffic to the cluster
            being passed through the current recmaster. This functionality
            is similar to using a load-balancing switch.
          </para>
          <para>
            All incoming packets are sent to the recmaster which will multiplex
            the clients across all available nodes and pass the packets on to
            a different node in the cluster to manage the connection based
            on the clients ip address. Outgoing packets however are sent
            directly from the node that was choosen back to the client.
            Since all incoming packets are sent through the recmaster this will
            have a throughput and performance impact when used. This impact
            in performance primarily affects write-performance while 
	    read-performance should be mainly unaffected.
            Only use this feature if your environment is mostly-read 
            (i.e. most traffic is from the nodes back to the clients) or
            if it is not important to get maximum write-performance to the
	    cluster.
          </para>
	  <para>
	    This feature is completely controlled from the eventscripts and 
	    does not require any CTDBD involvement. However, the CTDBD daemon
	    does need to know that the "single public ip" exists so that the 
	    CTDBD daemon will allow clients to set up killtcp to work on this
	    ip address.
	    </para>
	    <para>
	    CTDBD only allows clients to use killtcp to kill off (RST) tcp
	    connections to/from an ip address that is either a normal public
	    address or to/from the ip address specified by --single-public-ip.
	    No other tcp connections are allowed to be specified with killtcp.
	  </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--socket=&lt;filename&gt;</term>
        <listitem>
          <para>
            This specifies the name of the domain socket that ctdbd will create. This socket is used for local clients to attach to and communicate with the ctdbd daemon.
          </para>
          <para>
            The default is /tmp/ctdb.socket . You only need to use this option if you plan to run multiple ctdbd daemons on the same physical host.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--start-as-disabled</term>
        <listitem>
          <para>
	  This makes the ctdb daemon to be DISABLED when it starts up.
          </para>
          <para>
	  As it is DISABLED it will not get any of the public ip addresses
	  allocated to it, and thus this allow you to start ctdb on a node 
	  without causing any ip address to failover from other nodes onto
	  the new node.
          </para>
          <para>
	  When used, the administrator must keep track of when nodes start and
	  manually enable them again using the "ctdb enable" command, or else
	  the node will not host any services.
          </para>
          <para>
	  A node that is DISABLED will not host any services and will not be
	  reachable/used by any clients.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--syslog</term>
        <listitem>
          <para>
	    Send all log messages to syslog instead of to the ctdb logfile.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--torture</term>
        <listitem>
          <para>
            This option is only used for development and testing of ctdbd. It adds artificial errors and failures to the common codepaths in ctdbd to verify that ctdbd can recover correctly for failures.
          </para>
          <para>
            You do NOT want to use this option unless you are developing and testing new functionality in ctdbd.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--transport=&lt;STRING&gt;</term>
        <listitem>
          <para>
            This option specifies which transport to use for ctdbd internode communications. The default is "tcp".
          </para>
          <para>
            Currently only "tcp" is supported but "infiniband" might be
	    implemented in the future.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry><term>--usage</term>
        <listitem>
          <para>
            Print useage information to the screen.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>


  <refsect1><title>Private vs Public addresses</title>
    <para>
      When used for ip takeover in a HA environment, each node in a ctdb 
      cluster has multiple ip addresses assigned to it. One private and one or more public.
    </para>

    <refsect2><title>Private address</title>
      <para>
        This is the physical ip address of the node which is configured in 
        linux and attached to a physical interface. This address uniquely
        identifies a physical node in the cluster and is the ip addresses
        that ctdbd will use to communicate with the ctdbd daemons on the
        other nodes in the cluster.
      </para>
      <para>
        The private addresses are configured in /etc/ctdb/nodes 
        (unless the --nlist option is used) and contain one line for each 
        node in the cluster. Each line contains the private ip address for one
        node in the cluster. This file must be the same on all nodes in the
	cluster.
      </para>
      <para>
        Since the private addresses are only available to the network when the
        corresponding node is up and running you should not use these addresses
        for clients to connect to services provided by the cluster. Instead
        client applications should only attach to the public addresses since
        these are guaranteed to always be available.
      </para>
      <para>
        When using ip takeover, it is strongly recommended that the private 
	addresses are configured on a private network physically separated
	from the rest of the network and that this private network is dedicated
	to CTDB traffic.
      </para>
      Example /etc/ctdb/nodes for a four node cluster:
      <screen format="linespecific">
        10.1.1.1
        10.1.1.2
        10.1.1.3
        10.1.1.4
      </screen>
    </refsect2>
    <refsect2><title>Public address</title>
      <para>
        A public address on the other hand is not attached to an interface.
        This address is managed by ctdbd itself and is attached/detached to
        a physical node at runtime.
      </para>
      <para>
        The ctdb cluster will assign/reassign these public addresses across the
        available healthy nodes in the cluster. When one node fails, its public address
        will be migrated to and taken over by a different node in the cluster
        to ensure that all public addresses are always available to clients as 
	long as there are still nodes available capable of hosting this address.
      </para>
      <para>
        These addresses are not physically attached to a specific node. 
        The 'ctdb ip' command can be used to view the current assignment of 
        public addresses and which physical node is currently serving it.
      </para>
      <para>
	On each node this file contains a list of the public addresses that 
	this node is capable of hosting.
        The list also contain the netmask and the 
	interface where this address should be attached for the case where you
	may want to serve data out through multiple different interfaces.
      </para>
      Example /etc/ctdb/public_addresses for a node that can host 4 public addresses:
      <screen format="linespecific">
        11.1.1.1/24 eth0
        11.1.1.2/24 eth0
        11.1.2.1/24 eth1
        11.1.2.2/24 eth1
      </screen>

	<para>
	In most cases this file would be the same on all nodes in a cluster but
	there are exceptions when one may want to use different files
	on different nodes.
	</para>
	Example: 4 nodes partitioned into two subgroups :
	<screen format="linespecific">
	Node 0:/etc/ctdb/public_addresses
		10.1.1.1/24 eth0
		10.1.1.2/24 eth0

	Node 1:/etc/ctdb/public_addresses
		10.1.1.1/24 eth0
		10.1.1.2/24 eth0

	Node 2:/etc/ctdb/public_addresses
		10.2.1.1/24 eth0
		10.2.1.2/24 eth0

	Node 3:/etc/ctdb/public_addresses
		10.2.1.1/24 eth0
		10.2.1.2/24 eth0
	</screen>
	<para>
	In this example nodes 0 and 1 host two public addresses on the 
	10.1.1.x network  while nodes 2 and 3 host two public addresses for the 
	10.2.1.x network.
	</para>
	<para>
	Ip address 10.1.1.1 can be hosted by either of nodes 0 or 1 and will be
	available to clients as long as at least one of these two nodes are
	available.
	If both nodes 0 and node 1 become unavailable 10.1.1.1 also becomes 
	unavailable. 10.1.1.1 can not be failed over to node 2 or node 3 since
	these nodes do not have this ip address listed in their public
	addresses file.
	</para>
    </refsect2>
  </refsect1>


  <refsect1><title>Node status</title>
    <para>
      The current status of each node in the cluster can be viewed by the 
      'ctdb status' command.
    </para>
    <para>
      There are five possible for a node.
    </para>

    <para>
      OK - This node is fully functional.
    </para>
    
    <para>
      DISCONNECTED - This node could not be connected through the network 
      and is currently not particpating in the cluster. If there is a 
      public IP address associated with this node it should have been taken 
      over by a different node. No services are running on this node.
    </para>
 
    <para>
      DISABLED - This node has been administratively disabled. This node is 
      still functional and participates in the CTDB cluster but its IP 
      addresses have been taken over by a different node and no services are 
      currently being hosted.
    </para>
   
    <para>
      UNHEALTHY - A service provided by this node is malfunctioning and should 
      be investigated. The CTDB daemon itself is operational and participates 
      in the cluster. Its public IP address has been taken over by a different 
      node and no services are currently being hosted. All unhealthy nodes 
      should be investigated and require an administrative action to rectify.
    </para>
    
    <para>
      BANNED - This node failed too many recovery attempts and has been banned 
      from participating in the cluster for a period of RecoveryBanPeriod 
      seconds. Any public IP address has been taken over by other nodes. This 
      node does not provide any services. All banned nodes should be 
      investigated and require an administrative action to rectify. This node 
      does not perticipate in the CTDB cluster but can still be communicated 
      with. I.e. ctdb commands can be sent to it.
    </para>
  </refsect1>

  <refsect1>
    <title>PUBLIC TUNABLES</title>
    <para>
    These are the public tuneables that can be used to control how ctdb behaves.
    </para>

    <refsect2><title>KeepaliveInterval</title>
    <para>Default: 1</para>
    <para>
    How often should the nodes send keepalives to eachother.
    </para>
    </refsect2>
    <refsect2><title>KeepaliveLimit</title>
    <para>Default: 5</para>
    <para>
    After how many keepalive intervals without any traffic should a node
    wait until marking the peer as DISCONNECTED.
    </para>
    </refsect2>
    <refsect2><title>MonitorInterval</title>
    <para>Default: 15</para>
    <para>
    How often should ctdb run the event scripts to check for a nodes health.
    </para>
    </refsect2>
    <refsect2><title>TickleUpdateInterval</title>
    <para>Default: 20</para>
    <para>
    How often will ctdb record and store the "tickle" information used to
    kickstart stalled tcp connections after a recovery.
    </para>
    </refsect2>
    <refsect2><title>EventScriptTimeout</title>
    <para>Default: 20</para>
    <para>
    How long should ctdb let an event script run before aborting it and
    marking the node unhealthy.
    </para>
    </refsect2>
    <refsect2><title>RecoveryBanPeriod</title>
    <para>Default: 300</para>
    <para>
    If a node becomes banned causing repetitive recovery failures. The node will
    eventually become banned from the cluster.
    This controls how long the culprit node will be banned from the cluster
    before it is allowed to try to join the cluster again.
    Dont set to small. A node gets banned for a reason and it is usually due
    to real problems with the node.
    </para>
    </refsect2>
    <refsect2><title>DatabaseHashSize</title>
    <para>Default: 100000</para>
    <para>
    Size of the hash chains for the local store of the tdbs that ctdb manages.
    </para>
    </refsect2>
    <refsect2><title>RerecoveryTimeout</title>
    <para>Default: 10</para>
    <para>
    Once a recovery has completed, no additional recoveries are permitted until this timeout has expired.
    </para>
    </refsect2>
    <refsect2><title>EnableBans</title>
    <para>Default: 1</para>
    <para>
    When set to 0, this disables BANNING completely in the cluster and thus nodes can not get banned, even it they break. Dont set to 0.
    </para>
    </refsect2>
    <refsect2><title>DeterministicIPs</title>
    <para>Default: 1</para>
    <para>
    When enabled, this tunable makes ctdb try to keep public ip addresses locked to specific nodes as far as possible. This makes it easier for debugging since you can know that as long as all nodes are healthy public ip X will always be hosted by node Y. 
    </para>
    <para>
    The cost of using deterministic ip address assignment is that it disables part of the logic where ctdb tries to reduce the number of public ip assignment changes in the cluster. This tunable may increase the number of ip failover/failbacks that are performed on the cluster by a small margin.
    </para>
    </refsect2>
    <refsect2><title>DisableWhenUnhealthy</title>
    <para>Default: 0</para>
    <para>
    When set, As soon as a node becomes unhealthy, that node will also automatically become permanently DISABLED. Once a node is DISABLED, the only way to make it participate in the cluster again and host services is by manually enabling the node again using 'ctdb enable'. 
    </para>
    <para>
    This disables parts of the resilience and robustness of the cluster and should ONLY be used when the system administrator is actively monitoring the cluster, so that nodes can be enabled again.
    </para>
    </refsect2>
    <refsect2><title>NoIPFailback</title>
    <para>Default: 0</para>
    <para>
    When set to 1, ctdb will not perform failback of ip addresses when a node becomes healthy. Ctdb WILL perform failover of public ip addresses when a node becomes UNHEALTHY, but when the node becomes HEALTHY again, ctdb will not fail the addresses back.
    </para>
    <para>
    Use with caution! Normally when a node becomes available to the cluster
ctdb will try to reassign public ip addresses onto the new node as a way to distribute the workload evenly across the clusternode. Ctdb tries to make sure that all running nodes have approximately the same number of public addresses it hosts.
    </para>
    <para>
    When you enable this tunable, CTDB will no longer attempt to rebalance the cluster by failing ip addresses back to the new nodes. An unbalanced cluster will therefore remain unbalanced until there is manual intervention from the administrator. When this parameter is set, you can manually fail public ip addresses over to the new node(s) using the 'ctdb moveip' command.
    </para>
    </refsect2>
  </refsect1>



  <refsect1><title>SEE ALSO</title>
    <para>
      ctdb(1), onnode(1)
      <ulink url="http://ctdb.samba.org/"/>
    </para>
  </refsect1>

  <refsect1><title>COPYRIGHT/LICENSE</title>
<literallayout>
Copyright (C) Andrew Tridgell 2007
Copyright (C) Ronnie sahlberg 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see http://www.gnu.org/licenses/.
</literallayout>
  </refsect1>
</refentry>
